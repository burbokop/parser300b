use parser300b::*;
use trim_margin::MarginTrimmable;

#[test]
fn superhard_00_test() {
    assert_contains_tree!(
        include_str!("superhard.bnf"),
        [
            "stmt",
            ";",
        ],
        r#"
            |block
            |`stmt
            |``stmt
            |`;
        "#
    );   
}

#[test]
fn superhard_01_test() {
    assert_contains_tree!(
        include_str!("superhard.bnf"),
        [
            "ID",
            "=",
            "NUM",
            ";",
        ],
        r#"
            |block
            |`stmt
            |``subs
            |```lhs
            |````id
            |`````ID
            |```=
            |```postfix_rhs
            |````rhs
            |`````literal
            |``````NUM
            |`;
        "#
    );   
}


#[test]
fn superhard_02_test() {
    assert_contains_tree!(
        include_str!("superhard.bnf"),
        [
            "ID",
            "=",
            "NUM",
            "+",
            "NUM",
            ";",
        ],
        r#"
            |block
            |`stmt
            |``subs
            |```lhs
            |````id
            |`````ID
            |```=
            |```postfix_rhs
            |````rhs
            |`````expr
            |``````conditional_expr
            |```````logical_or_expr
            |````````logical_and_expr
            |`````````bit_inclusive_or_expr
            |``````````bit_exclusive_or_expr
            |```````````bit_and_expr
            |````````````eq_expr
            |`````````````relational_expr
            |``````````````shift_expr
            |```````````````additive_expr
            |````````````````additive_expr
            |`````````````````mul_expr
            |``````````````````unary_expr
            |```````````````````postfix_rhs
            |````````````````````rhs
            |`````````````````````literal
            |``````````````````````NUM
            |````````````````+
            |````````````````mul_expr
            |`````````````````unary_expr
            |``````````````````postfix_rhs
            |```````````````````rhs
            |````````````````````literal
            |`````````````````````NUM
            |`;
        "#
    );
}

///parse text: "exp = namespace { clazz = class(x int, y (){ 1 }) { (x + 1) * y } }"
#[test]
fn superhard_03_test() {
    assert_contains_tree!(
        include_str!("superhard.bnf"),
        [
            "exp",
            "=",
            "namespace",
            "{",
            "ID",
            "=",
            "class",
            "(",
            "ID",
            "int",
            ",",
            "ID",
            "(",
            ")",
            "{",
            "_",
            "=",
            "NUM",
            ";",
            "}",
            ")",
            "{",
            "_",
            "=",
            "ID",
            "+",
            "NUM",
            "*",
            "ID",
            ";",
            "}",
            ";",
            "}",
            ";",
        ],
        r#"
            |block
            |`stmt
            |``subs
            |```lhs
            |````id
            |`````ID
            |```=
            |```postfix_rhs
            |````rhs
            |`````expr
            |``````conditional_expr
            |```````logical_or_expr
            |````````logical_and_expr
            |`````````bit_inclusive_or_expr
            |``````````bit_exclusive_or_expr
            |```````````bit_and_expr
            |````````````eq_expr
            |`````````````relational_expr
            |``````````````shift_expr
            |```````````````additive_expr
            |````````````````additive_expr
            |`````````````````mul_expr
            |``````````````````unary_expr
            |```````````````````postfix_rhs
            |````````````````````rhs
            |`````````````````````literal
            |``````````````````````NUM
            |````````````````+
            |````````````````mul_expr
            |`````````````````unary_expr
            |``````````````````postfix_rhs
            |```````````````````rhs
            |````````````````````literal
            |`````````````````````NUM
            |`;
        "#
    );
}
